---
layout: base
---
#content
  h1 Details
  .row
    .large-6.columns
      h4 Map SAP function to Java
      p Use Java annotations to map the SAP function and its parameters to your Java classes.
        You only need to map those parameters which you really need.
      p Simple parameters are mapped to Java fields of simple types like <code>int</code> or <code>String</code>.
        Parameters of a complex type require you to implement a separate Java class.
    .large-6.columns
      p
        img src="/img/HibersapMapping.png"
  hr
  .row
    .large-6.columns
      p
        img src="/img/HibersapExecuteFunction.png"
    .large-6.columns
      h4 Execute functions in SAP
      p When you have mapped a SAP function to Java, you can use Hibersap's small and
        effective API to actually call the function in the SAP backend.
      p If you already worked with modern O/R mappers like JPA, Hibersap's API should look familiar to you.
        You can also spawn transactions around multiple calls to SAP.
  hr
  .row
    .large-6.columns
      h4 Configure Hibersap
      p To configure Hibersap you can either create an XML configuration file <code>META-INF/hibersap.xml</code>
        or configure Hibersap programmatically.
      p When using Hibersap with the SAP Java Connector you need to specify the JCo properties which will be passed on to the
        Java connector. When using Hibersap with a Resource Adapter the SAP systems are configured in the application server's
        JCA subsystem. Each Hibersap class which is annotated with <code>@Bapi</code> must also be listed here.
    .large-6.columns
      p
        img src="/img/HibersapConfiguration.png"
  hr
  .button.small
    a href="/example/" Step by step example <i class="fa fa-arrow-circle-o-right"></i>